{"version":3,"sources":["logo.svg","components/PetForm.js","components/PetList.js","views/Main.js","views/Details.js","views/Update.js","views/New.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","onSubmit","e","preventDefault","newPet","axios","post","then","res","data","navigate","catch","err","console","log","onChange","target","value","message","class","to","removeFromDom","setPet","useEffect","get","id","pet","map","index","key","_id","loaded","setLoaded","setResults","Axios","className","style","backgroundColor","PetList","petId","filter","ThePets","vote","setState","likes","state","this","disabled","onClick","Component","delete","editPet","PetForm","App","Main","path","New","Details","Update","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0JCI5B,WAAAC,GAAU,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEIF,mBAAS,IAFb,mBAEbG,EAFa,KAEPC,EAFO,OAGkBJ,mBAAS,IAH3B,mBAGbK,EAHa,KAGAC,EAHA,OAIQN,mBAAS,IAJjB,mBAIbO,EAJa,KAILC,EAJK,OAKQR,mBAAS,IALjB,mBAKbS,EALa,KAKLC,EALK,OAMQV,mBAAS,IANjB,mBAMbW,EANa,KAMLC,EANK,OAOQZ,mBAAS,IAPjB,mBAOba,EAPa,KAOLC,EAPK,KAsCpB,OACI,0BAAMC,SA9BI,SAAAC,GACVA,EAAEC,iBACF,IAAMC,EAAS,CAACjB,OAAME,OAAME,cAAaE,SAAQE,SAAQE,UACzDQ,IAAMC,KAAK,iCAAkCF,GACxCG,MAAK,SAAAC,GACCA,EAAIC,KAAKV,OACRC,EAAUQ,EAAIC,KAAKV,QAEnBW,YAAS,YAGhBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAoB1B,2BACI,6CADJ,OAGI,2BAAOvB,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAEd,EAAQc,EAAEc,OAAOC,UACjD,8BAAOlB,EAAOZ,KAAOY,EAAOZ,KAAK+B,QAAS,KAE9C,2BACI,6CADJ,OAGI,2BAAO7B,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAEZ,EAAQY,EAAEc,OAAOC,UACjD,8BAAOlB,EAAOV,KAAOU,EAAOV,KAAK6B,QAAS,KAE9C,2BACI,gDADJ,OAGI,2BAAO7B,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAEV,EAAeU,EAAEc,OAAOC,UACxD,8BAAOlB,EAAOR,YAAcQ,EAAOR,YAAY2B,QAAS,KAE5D,sCACA,2BACI,4CADJ,OAGI,2BAAO7B,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAER,EAAUQ,EAAEc,OAAOC,WAEvD,2BACI,4CADJ,OAGI,2BAAO5B,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAEN,EAAUM,EAAEc,OAAOC,WAEvD,2BACI,4CADJ,OAGI,2BAAO5B,KAAK,OAAO0B,SAAU,SAAAb,GAAC,OAAEJ,EAAUI,EAAEc,OAAOC,WAEvD,4BAAQE,MAAM,kBAAkB9B,KAAK,UAArC,WAnCJ,OAqCI,kBAAC,IAAD,CAAM+B,GAAG,SAAT,Y,OC3EG,WAAAnC,GACeA,EAAlBoC,cADa,IAAD,EAEQnC,oBAAS,GAFjB,gCAGUA,mBAAS,KAHnB,gCAIMA,mBAAS,cAJf,gCAWEA,mBAAS,KAXX,mBAWRoC,GAXQ,WA4BpB,OANAC,qBAAU,WACNlB,IAAMmB,IAAI,kCAAoCvC,EAAMwC,IAC/ClB,MAAK,SAAAC,GAAG,OAAIc,EAAO,eACbd,EAAIC,YAEhB,IAEC,6BACKxB,EAAMyC,IAAIC,KAAI,SAACD,EAAKE,GACjB,OACI,yBAAKT,MAAM,aACP,2BAAOA,MAAM,+CACT,4BACI,oCACA,oCACA,wCAEJ,wBAAIU,IAAKH,EAAII,KACT,4BACKJ,EAAIvC,MAGT,4BAAKuC,EAAIrC,MACT,4BACI,kBAAC,IAAD,CAAM+B,GAAI,SAAWM,EAAII,KAAzB,WADJ,2BAGI,kBAAC,IAAD,CAAMV,GAAI,SAAWM,EAAII,IAAM,SAA/B,WAKZ,mCCnDT,aAAO,IAAD,EACK5C,mBAAS,IADd,mBACVwC,EADU,KACLJ,EADK,OAEWpC,oBAAS,GAFpB,mBAEV6C,EAFU,KAEFC,EAFE,OAGa9C,mBAAS,IAHtB,mBAGD+C,GAHC,aAIS/C,mBAAS,aAJlB,6BAKjBqC,qBAAU,WACNW,IAAMV,IAAI,kCACLjB,MAAK,SAAAC,GACFc,EAAOd,EAAIC,MACXuB,GAAU,GACVC,EAAWzB,EAAIC,SAElBE,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAI,UAAWF,QACxC,IAcH,OACI,6BACI,yBAAKuB,UAAU,aACX,yBAAKA,UAAU,YAAYC,MAAO,CAC9BC,gBAAiB,eAEzB,2CACA,oEAGA,kBAAC,IAAD,CAAMjB,GAAG,aAAT,4BACA,6BAAK,6BACJW,GAAU,kBAACO,EAAD,CAASZ,IAAKA,EAAKL,cAfhB,SAAAkB,GAClBjB,EAAOI,EAAIc,QAAO,SAAAd,GAAG,OAAIA,EAAII,KAAOS,W,wCCzBtCE,E,YACF,WAAYxD,GAAQ,IAAD,8BACjB,4CAAMA,KAKRyD,KAAO,SAAAxC,GACL,EAAKyC,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAM,KALvC,EAAKC,MAAQ,CACXD,MAAO,GAHQ,E,sEAUjB,OACE,6BACI,qCAAWE,KAAKD,MAAMD,OACtB,4BAAQzB,MAAM,kBAAiB4B,SAAUD,KAAKD,MAAMD,MAAOI,QAASF,KAAKJ,KAAMjB,GAAIqB,KAAK7D,MAAMsD,OAA9F,sB,GAdUU,aAoBP,WAAAhE,GACeA,EAAlBoC,cADa,IAAD,EAQEnC,mBAAS,IARX,mBAQbwC,EARa,KAQRJ,EARQ,KAgBpB,OAPAC,qBAAU,WACNW,IAAMV,IAAI,kCAAoCvC,EAAMwC,IAC/ClB,MAAK,SAAAC,GAAG,OAAIc,EAAO,eACbd,EAAIC,YAEhB,IAGC,6BACI,yBAAK0B,UAAU,aACX,yBAAKA,UAAU,YAAYC,MAAO,CAC9BC,gBAAiB,eAErB,2CACA,6CAAmBX,EAAIvC,OAEvB,wCAAcuC,EAAIrC,MAClB,2CAAiBqC,EAAInC,aACrB,qCACI,2BAAImC,EAAIjC,QACR,2BAAIiC,EAAI/B,QACR,2BAAI+B,EAAI7B,SAEZ,kBAAC,EAAD,CAAS0C,MAAOb,EAAID,KACpB,6BACA,4BAAQN,MAAM,iBAAiB6B,QAAS,SAAC9C,GAhCnC,IAACqC,IAgCiDb,EAAII,IA/BpEI,IAAMgB,OAAO,kCAAoCX,GAC5ChC,MAAK,SAAAC,GACFE,YAAS,cA6BT,mBACA,6BACA,8BAEJ,kBAAC,IAAD,CAAMU,GAAI,SAAV,UC7DG,WAAAnC,GAAU,IACbwC,EAAOxC,EAAPwC,GADY,EAEIvC,qBAFJ,mBAEbC,EAFa,KAEPC,EAFO,OAGIF,qBAHJ,mBAGbG,EAHa,KAGPC,EAHO,OAIkBJ,qBAJlB,mBAIbK,EAJa,KAIAC,EAJA,OAKQN,qBALR,mBAKbO,EALa,KAKLC,EALK,OAMQR,qBANR,mBAMbS,EANa,KAMLC,EANK,OAOQV,qBAPR,mBAObW,EAPa,KAOLC,EAPK,OAQQZ,mBAAS,IARjB,mBAQba,EARa,KAQLC,EARK,KAuBpBuB,qBAAU,WACNlB,IAAMmB,IAAI,kCAAoCC,GACzClB,MAAK,SAAAC,GACFpB,EAAQoB,EAAIC,KAAKtB,MACjBG,EAAQkB,EAAIC,KAAKpB,MACjBG,EAAegB,EAAIC,KAAKlB,aACxBG,EAAUc,EAAIC,KAAKhB,QACnBG,EAAUY,EAAIC,KAAKd,QACnBG,EAAUU,EAAIC,KAAKZ,aAE5B,IAqBH,OACI,6BACI,yBAAKsC,UAAU,aACX,yBAAKA,UAAU,YAAYC,MAAO,CAC9BC,gBAAiB,eAEzB,2CACA,+CAGA,0BAAMpC,SAtDA,SAAAC,GACVA,EAAEC,iBACF,IAAMgD,EAAU,CAAChE,OAAME,OAAME,cAAaE,SAAQE,SAAQE,UAC1DQ,IAAMC,KAAK,iCAAkC6C,GACxC5C,MAAK,SAAAC,GACCA,EAAIC,KAAKV,OACRC,EAAUQ,EAAIC,KAAKV,QAEnBW,YAAS,SAAWe,MAG3Bd,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QA4CtB,2BACI,4CAAwB,6BACxB,2BAAOvB,KAAK,OACZF,KAAK,OACL8B,MAAO9B,EACP4B,SAAU,SAACb,GAAQd,EAAQc,EAAEc,OAAOC,UACpC,8BAAOlB,EAAOZ,KAAOY,EAAOZ,KAAK+B,QAAS,KAE9C,2BACI,4CAAwB,6BACxB,2BAAO7B,KAAK,OACZF,KAAK,OACL8B,MAAO5B,EACP0B,SAAU,SAACb,GAAQZ,EAAQY,EAAEc,OAAOC,UACpC,8BAAOlB,EAAOV,KAAOU,EAAOV,KAAK6B,QAAS,KAE9C,2BACI,+CAA2B,6BAC3B,2BAAO7B,KAAK,OACZF,KAAK,cACL8B,MAAO1B,EACPwB,SAAU,SAACb,GAAQV,EAAeU,EAAEc,OAAOC,UAC3C,8BAAOlB,EAAOR,YAAcQ,EAAOR,YAAY2B,QAAS,KAE5D,gDACA,2BACI,2CAAuB,6BACvB,2BAAO7B,KAAK,OACZF,KAAK,SACL8B,MAAOxB,EACPsB,SAAU,SAACb,GAAQR,EAAUQ,EAAEc,OAAOC,WAE1C,2BACI,2CAAuB,6BACvB,2BAAO5B,KAAK,OACZF,KAAK,SACL8B,MAAOtB,EACPoB,SAAU,SAACb,GAAQN,EAAUM,EAAEc,OAAOC,WAE1C,2BACI,2CAAuB,6BACvB,2BAAO5B,KAAK,OACZF,KAAK,SACL8B,MAAOpB,EACPkB,SAAU,SAACb,GAAQJ,EAAUI,EAAEc,OAAOC,WAE1C,4BAAQE,MAAM,kBAAkB9B,KAAK,UAArC,YA/CJ,OAiDI,kBAAC,IAAD,CAAM+B,GAAG,SAAT,WAEJ,6BACA,kBAAC,IAAD,CAAMA,GAAI,SAAV,UCjHG,aAAO,IAAD,EACKlC,mBAAS,IADd,mBACLoC,GADK,aAEWpC,oBAAS,GAFpB,mBAEF8C,GAFE,WAGjBT,qBAAU,WACNW,IAAMV,IAAI,kCACLjB,MAAK,SAAAC,GACFc,EAAOd,EAAIC,MACXuB,GAAU,MAEbrB,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAI,UAAWF,QACxC,IAIH,OACI,yBAAKuB,UAAU,aACX,yBAAKA,UAAU,YAAYC,MAAO,CAC9BC,gBAAiB,eAEjB,2CACA,8DAEA,kBAACe,EAAD,Q,MCJDC,MAbf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,KACE,kBAACmB,EAAD,CAAMC,KAAK,UACX,kBAACC,EAAD,CAAKD,KAAK,cACV,kBAACE,EAAD,CAAStB,UAAU,YAAYoB,KAAK,cACpC,kBAACG,EAAD,CAAQH,KAAK,sBCPDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,kB","file":"static/js/main.a6175c80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\nexport default props => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [skill1, setSkill1] = useState(\"\");\n    const [skill2, setSkill2] = useState(\"\");\n    const [skill3, setSkill3] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n    const adopt = e => {\n        e.preventDefault();\n        const newPet = {name, type, description, skill1, skill2, skill3};\n        axios.post(\"http://localhost:8000/api/pets\", newPet)\n            .then(res=> {\n                if(res.data.errors){\n                    setErrors(res.data.errors);\n                } else {\n                    navigate(\"/pets\");\n                }\n            })\n            .catch(err => console.log(err));\n    }\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/pets', {\n            name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3\n        })\n            .then(res=>{\n                console.log(\"Response: \", res);\n                navigate(\"/pets\");\n                })\n            .catch(err=>console.log(\"Error: \", err))\n    }\n    return(\n        <form onSubmit={adopt}>\n            <p>\n                <label>Pet name: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setName(e.target.value)}/>\n                <span>{errors.name ? errors.name.message: \"\"}</span>\n            </p>\n            <p>\n                <label>Pet type: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setType(e.target.value)}/>\n                <span>{errors.type ? errors.type.message: \"\"}</span>\n            </p>\n            <p>\n                <label>Description: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setDescription(e.target.value)}/>\n                <span>{errors.description ? errors.description.message: \"\"}</span>\n            </p>\n            <p>Skills:</p>\n            <p>\n                <label>Skill 1: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setSkill1(e.target.value)}/>\n            </p>\n            <p>\n                <label>Skill 2: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setSkill2(e.target.value)}/>\n            </p>\n            <p>\n                <label>Skill 3: </label>\n                &nbsp;\n                <input type=\"text\" onChange={e=>setSkill3(e.target.value)}/>\n            </p>\n            <button class=\"btn btn-primary\" type=\"submit\">Add pet</button>\n            &nbsp;\n            <Link to=\"/pets\">Cancel</Link>\n        </form>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PetList from '../components/PetList';\nimport { Link } from '@reach/router';\n\nexport default props => {\n    const { removeFromDom } = props;\n    const [loaded, setLoaded] = useState(false);\n    const [results, setResults] = useState([]);\n    const [order, setOrder] = useState(\"Ascending\");\n    const deletePet = (petId) => {\n        axios.delete('http://localhost:8000/api/pets/' + petId)\n            .then(res => {\n                removeFromDom(petId)\n            })\n    }\n    const [pet, setPet] = useState({});\n    const reverseOrder = e => {\n        let temp = [...results];\n        temp.reverse();\n        setResults(temp);\n        if(order === \"Ascending\") {\n            setOrder(\"Descending\");\n        } else {\n            setOrder(\"Ascending\");\n        }\n    }\n    useEffect(() => {\n        axios.get(\"http://localhost:8000/api/pets/\" + props.id)\n            .then(res => setPet({\n                ...res.data\n            }))\n    }, [])\n    return (\n        <div>\n            {props.pet.map((pet, index)=>{\n                return(\n                    <div class=\"container\">\n                        <table class=\"table table-sm table-striped table-bordered\">\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Actions</th>\n                            </tr>\n                            <tr key={pet._id}>\n                                <td>\n                                    {pet.name}\n                                    {/* {loaded && <PetList pet={pet} removeFromDom={removeFromDom}/>} */}\n                                </td>\n                                <td>{pet.type}</td>\n                                <td>\n                                    <Link to={\"/pets/\" + pet._id}>Details</Link>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <Link to={\"/pets/\" + pet._id + \"/edit\"}>Edit</Link>\n                                </td>\n                            </tr>\n                \n                        </table>\n                        <br/>\n                        {/* <p>\n                            {pet.name}\n                            &nbsp;\n                            <button onClick={(e)=>{deletePet(pet._id)}}>Delete</button>\n                        </p> */}\n                    </div>\n                )  \n            })}\n        </div>\n    )\n} ","import React, { useEffect, useState } from 'react'\n\nimport PetForm from '../components/PetForm';\nimport PetList from '../components/PetList';\nimport Axios from 'axios';\nimport { Link } from '@reach/router';\n\nexport default () => {\n    const [pet, setPet] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [results, setResults] = useState([]);\n    const [order, setOrder] = useState(\"Ascending\");\n    useEffect(() =>{\n        Axios.get('http://localhost:8000/api/pets')\n            .then(res=>{\n                setPet(res.data);\n                setLoaded(true);\n                setResults(res.data);\n            })\n            .catch(err=>console.log(\"Error: \", err))\n    }, [])\n    const reverseOrder = e => {\n        let temp = [...results];\n        temp.reverse();\n        setResults(temp);\n        if(order === \"Ascending\") {\n            setOrder(\"Descending\");\n        } else {\n            setOrder(\"Ascending\");\n        }\n    }\n    const removeFromDom = petId => {\n        setPet(pet.filter(pet => pet._id != petId));\n    }\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"jumbotron\" style={{\n                    backgroundColor: \"Dodgerblue\"\n                }}>\n            <h3>Pet Shelter</h3>\n            <h4>These pets are looking for a home!</h4>\n            </div>\n            </div>\n            <Link to=\"/pets/new\">Add a pet to the shelter</Link>\n            <br/><br/>\n            {loaded && <PetList pet={pet} removeFromDom={removeFromDom}/>}\n        </div>\n    )\n}","import React, { Component, useEffect, useState } from 'react'\nimport Axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\n\n\nclass ThePets extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        likes: 0\n      };\n    }\n    vote = e => {\n      this.setState({likes: this.state.likes+1});\n    }\n    render() {\n      return (\n        <div>\n            <p>Likes: {this.state.likes}</p>\n            <button class=\"btn btn-warning\"disabled={this.state.likes} onClick={this.vote} id={this.props.petId}>Like this pet</button>\n        </div>\n      )\n    }\n}\n\nexport default props => {\n    const { removeFromDom } = props;\n    const deletePet = (petId) => {\n        Axios.delete('http://localhost:8000/api/pets/' + petId)\n            .then(res => {\n                navigate(\"/pets\")\n            })\n    }\n    const [pet, setPet] = useState({})\n    useEffect(() => {\n        Axios.get(\"http://localhost:8000/api/pets/\" + props.id)\n            .then(res => setPet({\n                ...res.data\n            }))\n    }, [])\n    \n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"jumbotron\" style={{\n                    backgroundColor: \"Dodgerblue\"\n                }}>\n                <h3>Pet Shelter</h3>\n                <h4>Details about {pet.name}</h4>\n                </div>\n                <p>Pet type: {pet.type}</p>\n                <p>Description: {pet.description}</p>\n                <p>Skills: \n                    <p>{pet.skill1}</p>\n                    <p>{pet.skill2}</p>\n                    <p>{pet.skill3}</p>\n                </p>\n                <ThePets petId={pet.id}/>\n                <br/>\n                <button class=\"btn btn-danger\" onClick={(e)=>{deletePet(pet._id)}}>Adopt this pet!</button>\n                <br/>\n                <br/>\n            </div>\n            <Link to={\"/pets\"}>Home</Link>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\nexport default props => {\n    const { id } = props;\n    const [name, setName] = useState();\n    const [type, setType] = useState();\n    const [description, setDescription] = useState();\n    const [skill1, setSkill1] = useState();\n    const [skill2, setSkill2] = useState();\n    const [skill3, setSkill3] = useState();\n    const [errors, setErrors] = useState({});\n\n    const adopt = e => {\n        e.preventDefault();\n        const editPet = {name, type, description, skill1, skill2, skill3};\n        axios.post(\"http://localhost:8000/api/pets\", editPet)\n            .then(res=> {\n                if(res.data.errors){\n                    setErrors(res.data.errors);\n                } else {\n                    navigate(\"/pets/\" + id);\n                }\n            })\n            .catch(err => console.log(err));\n    }\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pets/' + id)\n            .then(res => {\n                setName(res.data.name);\n                setType(res.data.type);\n                setDescription(res.data.description);\n                setSkill1(res.data.skill1);\n                setSkill2(res.data.skill2);\n                setSkill3(res.data.skill3);\n            })\n    }, [])\n    const updatePet = e => {\n        e.preventDefault();\n        const editPet = {name, type, description, skill1, skill2, skill3};\n        axios.put(`http://localhost:8000/api/pets/` + id, {\n            name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3\n\n        })\n            .then(res => {\n                if(res.data.errors){\n                    setErrors(res.data.errors);\n                } else {\n                    navigate(\"/pets/\" + id)\n                }\n            });\n    }\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"jumbotron\" style={{\n                    backgroundColor: \"Dodgerblue\"\n                }}>\n            <h3>Pet Shelter</h3>\n            <h4>Edit this pet</h4>\n            </div>\n            </div>\n            <form onSubmit={adopt}>\n                <p>\n                    <label>Pet name:</label><br />\n                    <input type=\"text\" \n                    name=\"name\" \n                    value={name} \n                    onChange={(e) => { setName(e.target.value) }} />\n                    <span>{errors.name ? errors.name.message: \"\"}</span>\n                </p>\n                <p>\n                    <label>Pet type:</label><br />\n                    <input type=\"text\" \n                    name=\"type\"\n                    value={type} \n                    onChange={(e) => { setType(e.target.value) }} />\n                    <span>{errors.type ? errors.type.message: \"\"}</span>\n                </p>\n                <p>\n                    <label>Description:</label><br />\n                    <input type=\"text\" \n                    name=\"description\"\n                    value={description} \n                    onChange={(e) => { setDescription(e.target.value) }} />\n                    <span>{errors.description ? errors.description.message: \"\"}</span>\n                </p>\n                <p>Skills (optional)</p>\n                <p>\n                    <label>Skill 1:</label><br />\n                    <input type=\"text\" \n                    name=\"skill1\"\n                    value={skill1} \n                    onChange={(e) => { setSkill1(e.target.value) }} />\n                </p>\n                <p>\n                    <label>Skill 2:</label><br />\n                    <input type=\"text\" \n                    name=\"skill2\"\n                    value={skill2} \n                    onChange={(e) => { setSkill2(e.target.value) }} />\n                </p>\n                <p>\n                    <label>Skill 3:</label><br />\n                    <input type=\"text\" \n                    name=\"skill3\"\n                    value={skill3} \n                    onChange={(e) => { setSkill3(e.target.value) }} />\n                </p>\n                <button class=\"btn btn-primary\" type=\"submit\">Edit pet</button>\n                &nbsp;\n                <Link to=\"/pets\">Cancel</Link>\n            </form>\n            <br/>\n            <Link to={\"/pets\"}>Home</Link>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\n\nimport PetForm from '../components/PetForm';\nimport PetList from '../components/PetList';\nimport Axios from 'axios';\nimport { Link } from '@reach/router';\n\nexport default () => {\n    const [pet, setPet] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    useEffect(() =>{\n        Axios.get('http://localhost:8000/api/pets')\n            .then(res=>{\n                setPet(res.data);\n                setLoaded(true);\n            })\n            .catch(err=>console.log(\"Error: \", err))\n    }, [])\n    const removeFromDom = petId => {\n        setPet(pet.filter(pet => pet._id != petId));\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"jumbotron\" style={{\n                backgroundColor: \"Dodgerblue\"\n            }}>\n                <h3>Pet Shelter</h3>\n                <h4>Know of a pet needing a home?</h4>\n            </div>\n                <PetForm/>\n            \n            \n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { Router } from '@reach/router';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './views/Main';\nimport Details from './views/Details';\nimport Update from './views/Update';\nimport New from './views/New';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/pets\"/>\n        <New path=\"/pets/new\"/>\n        <Details className=\"Jumbotron\" path=\"/pets/:id\"/>\n        <Update path=\"/pets/:id/edit\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}